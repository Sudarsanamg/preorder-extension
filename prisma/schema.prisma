generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model Store {
  id                        String   @id @default(uuid())
  shopId                    String   @unique
  currencyCode              String
  offlineToken              String?
  webhookRegistered         Boolean  @default(false)
  metaobjectsCreated        Boolean  @default(false)
  metaFieldsCreated         Boolean  @default(false)
  shopifyDomain             String   @unique
  sendCustomEmail           Boolean  @default(false)
  appInstalled              Boolean  @default(true)
  ConfrimOrderEmailSettings Json?
  ShippingEmailSettings     Json?
  GeneralSettings           Json?
  EmailConfig               Json?
  SetupCompleted            Boolean  @default(false)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  vaultedPayment            VaultedPayment[]
  preorderCampaign          PreorderCampaign[]
  campaignOrders            CampaignOrders[]
}

model VaultedPayment {
  id             String        @id @default(uuid())
  orderId        String        @unique
  storeDomain    String        
  storeId        String     
  idempotencyKey String
  amount         Decimal
  currencyCode   String
  mandateId      String
  dueDate        DateTime
  paymentStatus  PaymentStatus
  accessToken    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  store          Store         @relation(fields: [storeId], references: [id])
}

model PreorderCampaign {
  id                      String                    @id @default(uuid())
  shopId                  String                    @default("Invalid shop ID")
  storeId                 String                   
  name                    String
  campaignType            Int                       @default(2)
  depositPercent          Int
  balanceDueDate          DateTime
  refundDeadlineDays      Int?
  releaseDate             DateTime?
  status                  CampaignStatus            @default(DRAFT)
  campaignEndDate         DateTime
  totalOrders             Int                       @default(0)
  orderTags               Json?
  customerTags            Json?
  discountType            DiscountType              @default(NONE)
  discountPercent         Int?
  discountFixed           Int?
  getDueByValt            Boolean                   @default(false)
  fulfilmentmode          Fulfilmentmode?
  scheduledFulfilmentType scheduledFulfilmentType?
  fulfilmentDaysAfter     Int?
  fulfilmentExactDate     DateTime?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  products                PreorderCampaignProduct[]
  store                   Store    @relation(fields: [storeId] , references: [id])
}



model PreorderCampaignProduct {
  id           String           @id @default(uuid())
  campaignId   String
  productId    String
  variantId    String?
  variantTitle String?
  price        Decimal?
  imageUrl     String?
  maxQuantity  Int?
  soldQuantity Int              @default(0)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  campaign     PreorderCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model CampaignOrders {
  id             String        @id @default(uuid())
  shopId         String
  storeId        String
  order_number   Int         
  order_id       String        @unique
  draft_order_id String        @unique
  customerEmail  String        @default("")
  dueDate        DateTime
  balanceAmount  Int?
  paymentStatus  PaymentStatus
  store          Store         @relation(fields: [storeId] ,references: [id])
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

enum DiscountType {
  NONE
  FIXED
  PERCENTAGE
}

enum CampaignStatus {
  DRAFT
  PUBLISHED
  UNPUBLISH
}

enum Fulfilmentmode {
  ONHOLD
  UNFULFILED
  SCHEDULED
}

enum scheduledFulfilmentType {
  DAYS_AFTER
  EXACT_DATE
}